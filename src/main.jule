// jpu CLI
// Copyright 2025 Adam Perkowski.
// Use of this source code is governed by the BSD 3-Clause License.
// See the LICENSE file for details.

use cy "colorify"
use "std/flag"
use "std/os"
use ss "std/strings"
use "std/sys"

const protonGeURL = "https://api.github.com/repos/GloriousEggroll/proton-ge-custom/releases"
const defaultInstallDir = "~/.steam/root/compatibilitytools.d/"

static argMap: map[int][2]str = {}
static successMessage = cy::Colorify("#", cy::Style{
	Foreground: cy::Foreground.Green,
	Background: cy::Background.Black,
})
static infoMessage = cy::Colorify("*", cy::Style{
	Foreground: cy::Foreground.Blue,
	Background: cy::Background.Black,
})
static errorMessage = cy::Colorify("!", cy::Style{
	Foreground: cy::Foreground.Red,
	Background: cy::Background.Black,
})

fn main() {
	mut fs := flag::FlagSet.New()

	let mut dir: str
	let mut help: bool

	fs.AddVar[str](unsafe { (&str)(&dir) }, "dir", 'd', "Set target installation directory")
	fs.AddVar[bool](unsafe { (&bool)(&help) }, "help", 'h', "Show this help message")

	fs.Parse(os::Args()[1:]) else {
		handleErr("Failed to parse flags")
		ret
	}

	if help {
		println(autoHelp(fs))
		ret
	}

	println(infoMessage + " No arguments provided. Assuming an update.")
	update(dir)
}

fn update(mut installDir: str) {
	println(infoMessage + " Getting the latest Proton-GE release...")
	proton := GetProton("", protonGeURL, installDir) else {
		handleErr(error)
		ret
	}
	println(infoMessage + " Downloading...")
	proton.Download() else {
		handleErr(error)
	}
	println(infoMessage + " Installing...")
	proton.Install() else {
		handleErr(error)
	}
	println(successMessage + " Done!")
}

fn handleErr(err: any) {
	print(errorMessage + " ")
	println(err)
	sys::Exit(1)
}

fn autoHelp(mut flags: &flag::FlagSet): (res: str) {
	mut maxWidth := 0
	for _, f in flags.Flags() {
		if len(f.Name()) > maxWidth {
			maxWidth = len(f.Name())
		}
	}

	res = "Usage: jpu [flags]\n\nFlags:\n"
	for _, f in flags.Flags() {
		res += "   --" + f.Name() + ss::Repeat(" ", maxWidth-len(f.Name())) + "   " + f.What() + "\n"
	}

	ret res
}